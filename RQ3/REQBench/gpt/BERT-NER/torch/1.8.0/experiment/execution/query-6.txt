
                        **Debug Mission** 
                        Resolve runtime crash caused by code-level incompatibilities in dependency chain.

                        **Input Context**
                        - Current environment: boto3==1.17.44
botocore==1.20.44
charset-normalizer==2.0.0
click==7.1.2
Flask==1.1.4
Flask-Cors==3.0.10
idna==2.10
importlib-metadata==3.10.0
itsdangerous==1.1.0
Jinja2==2.11.3
jmespath==0.10.0
joblib==1.3.2
MarkupSafe==1.1.1
nltk==3.6.5
numpy==1.19.5
python-dateutil==2.8.1
pytorch-transformers==1.2.0
regex==2021.8.3
requests==2.25.1
s3transfer==0.3.4
sacremoses==0.0.43
sentencepiece==0.1.91
seqeval==0.0.12
six==1.15.0
torch==1.8.0
tqdm==4.41.1
typing_extensions==3.7.4.3
urllib3==1.25.11
Werkzeug==1.0.1
zipp==3.4.0

                        - Python version: 3.7
                        - Crash traceback: Traceback (most recent call last):
  File "run_ner.py", line 594, in <module>
    main()
  File "run_ner.py", line 563, in main
    logits = model(input_ids, segment_ids, input_mask,valid_ids=valid_ids,attention_mask_label=l_mask)
  File "/home/lei/anaconda3/envs/py37-4/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "run_ner.py", line 33, in forward
    sequence_output = self.bert(input_ids, token_type_ids, attention_mask,head_mask=None)[0]
  File "/home/lei/anaconda3/envs/py37-4/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/lei/anaconda3/envs/py37-4/lib/python3.7/site-packages/pytorch_transformers/modeling_bert.py", line 710, in forward
    head_mask=head_mask)
  File "/home/lei/anaconda3/envs/py37-4/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/lei/anaconda3/envs/py37-4/lib/python3.7/site-packages/pytorch_transformers/modeling_bert.py", line 431, in forward
    layer_outputs = layer_module(hidden_states, attention_mask, head_mask[i])
  File "/home/lei/anaconda3/envs/py37-4/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/lei/anaconda3/envs/py37-4/lib/python3.7/site-packages/pytorch_transformers/modeling_bert.py", line 409, in forward
    attention_outputs = self.attention(hidden_states, attention_mask, head_mask)
  File "/home/lei/anaconda3/envs/py37-4/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/lei/anaconda3/envs/py37-4/lib/python3.7/site-packages/pytorch_transformers/modeling_bert.py", line 366, in forward
    self_outputs = self.self(input_tensor, attention_mask, head_mask)
  File "/home/lei/anaconda3/envs/py37-4/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/lei/anaconda3/envs/py37-4/lib/python3.7/site-packages/pytorch_transformers/modeling_bert.py", line 286, in forward
    mixed_query_layer = self.query(hidden_states)
  File "/home/lei/anaconda3/envs/py37-4/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/lei/anaconda3/envs/py37-4/lib/python3.7/site-packages/torch/nn/modules/linear.py", line 94, in forward
    return F.linear(input, self.weight, self.bias)
  File "/home/lei/anaconda3/envs/py37-4/lib/python3.7/site-packages/torch/nn/functional.py", line 1753, in linear
    return torch._C._nn.linear(input, weight, bias)
RuntimeError: CUDA error: CUBLAS_STATUS_INTERNAL_ERROR when calling `cublasCreate(handle)`


                        **Analysis Protocol**
                        1. Traceback Pattern Matching：
                        a. Identify error type (ImportError/AttributeError/TypeError)
                        b. Map to possible API changes in torch v1.8.0 or its dependencies
                        2. Compatibility Matrix Check：
                        a. Verify library-to-library API compatibility through version ranges
                        b. Confirm project-to-library interface compatibility
                        3. Breakpoint Isolation：
                        b. Determine if conflict originates from：
                            • Direct API changes in torch
                            • Transitive dependency API shifts

                        **Resolution Rules**
                        - PRIMARY CONSTRAINT: Maintain torch==1.8.0
                        - SECONDARY ADJUSTMENTS: 
                        • Modify dependency versions only when API contracts allow
                        • Prefer backward-compatible minor version changes

                        **Output Mandates**
                        STRICT FORMAT:
                        lib1==x.y.z  
                        lib2==a.b.c
                        ...
                        PROHIBITED:
                        • Any non-version text.
                        • Library additions/removals
                        • Version placeholders
                        MANDATORY:
                        • Preserve original library names and count
                        • Pin EXACT versions
                        • Zero explanations/comments
                        